datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id          String      @id @default(uuid())
  name        String
  company     String
  description String
  featured    Boolean
  image       String
  price       Int
  qty         Int         @default(1)
  colors      String? // store JSON string like '["Red","Blue"]'
  sizes       String? // store JSON string like '["S","M","L"]'
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  clerkId     String
  favorites   Favorite[]
  reviews     Review[]
  cartItems   CartItem[]
  OrderItem   OrderItem[]
}

model Favorite {
  id        String   @id @default(uuid())
  clerkId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id             String   @id @default(uuid())
  clerkId        String
  rating         Int
  comment        String
  authorName     String
  authorImageUrl String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
}

model Cart {
  id             String     @id @default(uuid())
  clerkId        String
  cartItems      CartItem[]
  numItemsInCart Int        @default(0)
  cartTotal      Int        @default(0)
  shipping       Int        @default(0)
  tax            Int        @default(0)
  taxRate        Float      @default(0)
  orderTotal     Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  amount    Int
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                String      @id @default(uuid())
  clerkId           String
  products          Int         @default(0)
  orderTotal        Int         @default(0)
  tax               Int         @default(0)
  shipping          Int         @default(0)
  email             String
  phone             String?
  isPaid            Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  paystackReference String?
  cartId            String?
  OrderItems        OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int?
  price     Float?
  color     String?
  size      String?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Slider {
  id        String   @id @default(uuid())
  title     String? // optional title for the slider image
  imageUrl  String // URL/path to the slider image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
